diff --git a/lib/ui/auth/auth_wrapper.dart b/lib/ui/auth/auth_wrapper.dart
index f376b95..54b526c 100644
--- a/lib/ui/auth/auth_wrapper.dart
+++ b/lib/ui/auth/auth_wrapper.dart
@@ -5,9 +5,9 @@ import 'package:flutter/cupertino.dart';
 import 'package:flutter/material.dart';
 import 'package:provider/provider.dart';
 
-import '../common/map_view/map_view_provider.dart';
+import '../common/map_view/map_view_state.dart';
 import '../common/user_wrapper/user_wrapper.dart';
-import '../common/user_wrapper/user_wrapper_provider.dart';
+import '../common/user_wrapper/user_wrapper_state.dart';
 
 class AuthWrapper extends StatelessWidget {
   const AuthWrapper({Key? key}) : super(key: key);
@@ -21,10 +21,10 @@ class AuthWrapper extends StatelessWidget {
       authService.timer?.cancel();
       return MultiProvider(
         providers: [
-          ChangeNotifierProvider<UserWrapperProvider>(
-              create: (context) => UserWrapperProvider()),
-          ChangeNotifierProvider<MapViewProvider>(
-              create: (context) => MapViewProvider(context))
+          ChangeNotifierProvider<UserWrapperState>(
+              create: (context) => UserWrapperState()),
+          ChangeNotifierProvider<MapViewState>(
+              create: (context) => MapViewState(context))
         ],
         child: const UserWrapper(),
       );
diff --git a/lib/ui/common/app_drawer/app_drawer.dart b/lib/ui/common/app_drawer/app_drawer.dart
index 6fc91c5..8b06bae 100644
--- a/lib/ui/common/app_drawer/app_drawer.dart
+++ b/lib/ui/common/app_drawer/app_drawer.dart
@@ -1,13 +1,13 @@
 import 'package:ap_lanes/data/model/remote/user.dart';
-import 'package:ap_lanes/ui/common/app_drawer/app_drawer_provider.dart';
-import 'package:ap_lanes/ui/driver/driver_home_provider.dart';
+import 'package:ap_lanes/ui/common/app_drawer/app_drawer_state.dart';
+import 'package:ap_lanes/ui/driver/driver_home_state.dart';
 import 'package:cloud_firestore/cloud_firestore.dart';
 import 'package:flutter/material.dart';
 import 'package:provider/provider.dart';
 
 import '../../../services/auth_service.dart';
-import '../map_view/map_view_provider.dart';
-import '../user_wrapper/user_wrapper_provider.dart';
+import '../map_view/map_view_state.dart';
+import '../user_wrapper/user_wrapper_state.dart';
 
 class AppDrawer extends StatelessWidget {
   final QueryDocumentSnapshot<User>? user;
@@ -26,7 +26,7 @@ class AppDrawer extends StatelessWidget {
   });
 
   Widget getDriverHeaderContent(BuildContext context) {
-    final state = Provider.of<DriverHomeProvider>(context, listen: false);
+    final state = Provider.of<DriverHomeState>(context, listen: false);
     return Container(
       padding: const EdgeInsets.symmetric(vertical: 4, horizontal: 8),
       decoration: BoxDecoration(
@@ -47,8 +47,8 @@ class AppDrawer extends StatelessWidget {
 
   @override
   Widget build(BuildContext context) {
-    final MapViewProvider mapViewState = context.watch<MapViewProvider>();
-    final AppDrawerProvider appDrawerState = context.watch<AppDrawerProvider>();
+    final MapViewState mapViewState = context.watch<MapViewState>();
+    final AppDrawerState appDrawerState = context.watch<AppDrawerState>();
 
     return Drawer(
       child: Column(
@@ -101,7 +101,7 @@ class AppDrawer extends StatelessWidget {
                       ? () => onNavigateWhenLocked()
                       : () {
                           mapViewState.resetMap();
-                          context.read<UserWrapperProvider>().userMode = UserMode.passengerMode;
+                          context.read<UserWrapperState>().userMode = UserMode.passengerMode;
                         });
             }
             return ListTile(
@@ -111,7 +111,7 @@ class AppDrawer extends StatelessWidget {
                   ? () => onNavigateWhenLocked()
                   : () {
                       mapViewState.resetMap();
-                      context.read<UserWrapperProvider>().userMode = UserMode.driverMode;
+                      context.read<UserWrapperState>().userMode = UserMode.driverMode;
                     },
             );
           }()),
diff --git a/lib/ui/common/app_drawer/app_drawer_provider.dart b/lib/ui/common/app_drawer/app_drawer_provider.dart
deleted file mode 100644
index bb448a1..0000000
--- a/lib/ui/common/app_drawer/app_drawer_provider.dart
+++ /dev/null
@@ -1,23 +0,0 @@
-import 'package:ap_lanes/data/repo/feedback_repo.dart';
-import 'package:ap_lanes/ui/common/user_wrapper/user_wrapper_provider.dart';
-import 'package:flutter/material.dart';
-import 'package:provider/provider.dart';
-
-import '../../../data/model/remote/feedback.dart' as remote;
-
-class AppDrawerProvider extends ChangeNotifier {
-  final BuildContext _context;
-  final FeedbackRepo feedbackRepo = FeedbackRepo();
-
-  AppDrawerProvider(this._context);
-
-  // bool isDriverMode() => _context.read()<UserWrapperState>().userMode == UserMode.driverMode;
-
-  void submitFeedback(String feedback) {
-    feedbackRepo.createFeedback(
-      remote.Feedback(
-        feedback: feedback,
-      ),
-    );
-  }
-}
diff --git a/lib/ui/common/map_view/map_view.dart b/lib/ui/common/map_view/map_view.dart
index c6376eb..eba0004 100644
--- a/lib/ui/common/map_view/map_view.dart
+++ b/lib/ui/common/map_view/map_view.dart
@@ -1,4 +1,4 @@
-import 'package:ap_lanes/ui/common/map_view/map_view_provider.dart';
+import 'package:ap_lanes/ui/common/map_view/map_view_state.dart';
 import 'package:flutter/material.dart';
 import 'package:flutter_map/flutter_map.dart';
 import 'package:flutter_map_tile_caching/flutter_map_tile_caching.dart';
@@ -10,22 +10,22 @@ class MapView extends StatefulWidget {
   const MapView({Key? key}) : super(key: key);
 
   @override
-  State<MapView> createState() => MapViewState();
+  State<MapView> createState() => _MapViewState();
 }
 
-class MapViewState extends State<MapView> with TickerProviderStateMixin {
+class _MapViewState extends State<MapView> with TickerProviderStateMixin {
   AnimationController? animationController;
-  MapViewProvider? mapViewState;
+  MapViewState? mapViewState;
 
   @override
   void initState() {
     super.initState();
-    context.read<MapViewProvider>().mapView = this;
+    context.read<MapViewState>().animateCamera = animateCamera;
   }
 
   @override
   Widget build(BuildContext context) {
-    mapViewState = context.watch<MapViewProvider>();
+    mapViewState = context.watch<MapViewState>();
 
     return mapViewState!.currentPosition == null
         ? const Center(
diff --git a/lib/ui/common/map_view/map_view_provider.dart b/lib/ui/common/map_view/map_view_provider.dart
deleted file mode 100644
index b78e85b..0000000
--- a/lib/ui/common/map_view/map_view_provider.dart
+++ /dev/null
@@ -1,174 +0,0 @@
-import 'dart:async';
-
-import 'package:ap_lanes/ui/common/map_view/map_view.dart';
-import 'package:flutter/material.dart';
-import 'package:flutter_map/flutter_map.dart';
-import 'package:geolocator/geolocator.dart';
-import 'package:latlong2/latlong.dart';
-
-import '../../../util/location_helpers.dart';
-
-class MapViewProvider extends ChangeNotifier {
-  MapViewProvider(BuildContext context) {
-    initializeLocation(context);
-  }
-
-  /*
-  * Variables
-  * */
-  bool _shouldCenter = true;
-  LatLng? _currentPosition;
-  StreamSubscription<Position>? _locationListener;
-  final Set<Polyline> _polylines = <Polyline>{};
-  final Map<String, Marker> _markers = <String, Marker>{};
-  bool isMapReady = false;
-  MapViewState? mapView;
-  final MapController _mapController = MapController();
-
-  /*
-  * Functions
-  * */
-  void initializeLocation(BuildContext context) async {
-    final hasPermissions = await handleLocationPermission(context);
-
-    if (hasPermissions) {
-      _locationListener = Geolocator.getPositionStream(
-        locationSettings: const LocationSettings(accuracy: LocationAccuracy.bestForNavigation),
-      ).listen((position) async {
-        final latLng = LatLng(position.latitude, position.longitude);
-        _currentPosition = latLng;
-        _markers["user"] =
-            Marker(point: latLng, builder: (context) => const Icon(Icons.account_circle_rounded, size: 35, color: Colors.black));
-        notifyListeners();
-
-        if (_shouldCenter) {
-          resetCamera();
-        }
-      });
-    }
-  }
-
-  Future<void> resetCamera() async {
-    if (!isMapReady || currentPosition == null) return;
-    mapView?.animateCamera(_currentPosition!, 17.0);
-  }
-
-  void setCameraBetweenMarkers({
-    required LatLng firstLatLng,
-    required LatLng secondLatLng,
-    double topOffsetPercentage = 0,
-    double bottomOffsetPercentage = 0,
-    double leftOffsetPercentage = 0,
-    double rightOffsetPercentage = 0,
-  }) {
-    if (!isMapReady) return;
-    
-    double minLat = firstLatLng.latitude;
-    double minLng = firstLatLng.longitude;
-    double maxLat = secondLatLng.latitude;
-    double maxLng = secondLatLng.longitude;
-
-    if (secondLatLng.latitude < minLat) {
-      maxLat = minLat;
-      minLat = secondLatLng.latitude;
-    }
-    if (secondLatLng.longitude < minLng) {
-      maxLng = minLng;
-      minLng = secondLatLng.longitude;
-    }
-
-    final latDifference = maxLat - minLat;
-    final topOffsetValue = latDifference * topOffsetPercentage;
-    final bottomOffsetValue = latDifference * bottomOffsetPercentage;
-
-    final lngDifference = maxLat - minLat;
-    final leftOffsetValue = lngDifference * leftOffsetPercentage;
-    final rightOffsetValue = lngDifference * rightOffsetPercentage;
-
-    final bounds = LatLngBounds(
-      LatLng(minLat - bottomOffsetValue, minLng - leftOffsetValue),
-      LatLng(maxLat + topOffsetValue, maxLng + rightOffsetValue),
-    );
-
-    final centerZoom = _mapController.centerZoomFitBounds(bounds);
-
-    mapView?.animateCamera(centerZoom.center, centerZoom.zoom);
-  }
-
-  void setCameraToRoute({
-    double topOffsetPercentage = 0,
-    double bottomOffsetPercentage = 0,
-    double leftOffsetPercentage = 0,
-    double rightOffsetPercentage = 0,
-  }) {
-    if (!isMapReady) return;
-
-    double minLat = _polylines.first.points.first.latitude;
-    double minLng = _polylines.first.points.first.longitude;
-    double maxLat = _polylines.first.points.first.latitude;
-    double maxLng = _polylines.first.points.first.longitude;
-    for (var poly in _polylines) {
-      for (var point in poly.points) {
-        if (point.latitude < minLat) minLat = point.latitude;
-        if (point.latitude > maxLat) maxLat = point.latitude;
-        if (point.longitude < minLng) minLng = point.longitude;
-        if (point.longitude > maxLng) maxLng = point.longitude;
-      }
-    }
-
-    final latDifference = maxLat - minLat;
-    final topOffsetValue = latDifference * topOffsetPercentage;
-    final bottomOffsetValue = latDifference * bottomOffsetPercentage;
-
-    final lngDifference = maxLat - minLat;
-    final leftOffsetValue = lngDifference * leftOffsetPercentage;
-    final rightOffsetValue = lngDifference * rightOffsetPercentage;
-
-    final bounds = LatLngBounds(
-      LatLng(minLat - bottomOffsetValue, minLng - leftOffsetValue),
-      LatLng(maxLat + topOffsetValue, maxLng + rightOffsetValue),
-    );
-
-    final centerZoom = _mapController.centerZoomFitBounds(bounds);
-
-    mapView?.animateCamera(centerZoom.center, centerZoom.zoom);
-
-  }
-
-  void resetMap() {
-    isMapReady = false;
-    mapView = null;
-    _shouldCenter = true;
-    _polylines.clear();
-    _markers.removeWhere((key, value) => key != "user");
-  }
-
-  @override
-  void dispose() {
-    _locationListener?.cancel();
-    super.dispose();
-  }
-
-  /*
-  * Getters
-  * */
-  MapController get mapController => _mapController;
-  
-  LatLng? get currentPosition => _currentPosition;
-
-  Map<String, Marker> get markers => _markers;
-
-  Set<Polyline> get polylines => _polylines;
-
-  bool get shouldCenter => _shouldCenter;
-
-  /*
-  * Setters
-  * */
-
-
-  set shouldCenter(bool value) {
-    _shouldCenter = value;
-    notifyListeners();
-  }
-}
diff --git a/lib/ui/common/user_wrapper/user_wrapper.dart b/lib/ui/common/user_wrapper/user_wrapper.dart
index 4ed489f..9bff373 100644
--- a/lib/ui/common/user_wrapper/user_wrapper.dart
+++ b/lib/ui/common/user_wrapper/user_wrapper.dart
@@ -1,18 +1,18 @@
 import 'package:ap_lanes/data/repo/journey_repo.dart';
 import 'package:ap_lanes/ui/driver/driver_home.dart';
-import 'package:ap_lanes/ui/driver/driver_home_provider.dart';
+import 'package:ap_lanes/ui/driver/driver_home_state.dart';
 import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;
 import 'package:flutter/material.dart';
 import 'package:provider/provider.dart';
 
 import '../../passenger/passenger_home.dart';
-import '../../passenger/passenger_home_provider.dart';
-import 'user_wrapper_provider.dart';
+import '../../passenger/passenger_home_state.dart';
+import 'user_wrapper_state.dart';
 
 class UserWrapper extends StatelessWidget {
   const UserWrapper({Key? key}) : super(key: key);
 
-  Future<bool> _hasOngoingJourney(BuildContext context, UserWrapperProvider userWrapperState) async {
+  Future<bool> _hasOngoingJourney(BuildContext context, UserWrapperState userWrapperState) async {
     final firebaseUser = context.read<firebase_auth.User?>();
     final JourneyRepo journeyRepo = JourneyRepo();
 
@@ -25,7 +25,7 @@ class UserWrapper extends StatelessWidget {
 
   @override
   Widget build(BuildContext context) {
-    final userWrapperState = context.watch<UserWrapperProvider>();
+    final userWrapperState = context.watch<UserWrapperState>();
 
     _hasOngoingJourney(context, userWrapperState).then((hasOngoingJourney) {
       if (hasOngoingJourney) {
@@ -35,12 +35,12 @@ class UserWrapper extends StatelessWidget {
 
     if (userWrapperState.userMode == UserMode.passengerMode) {
       return ChangeNotifierProvider(
-        create: (context) => PassengerHomeProvider(context),
+        create: (context) => PassengerHomeState(context),
         child: const PassengerHome(),
       );
     } else {
-      return ChangeNotifierProvider<DriverHomeProvider>(
-        create: (context) => DriverHomeProvider(context),
+      return ChangeNotifierProvider<DriverHomeState>(
+        create: (context) => DriverHomeState(context),
         child: const DriverHome(),
       );
     }
diff --git a/lib/ui/common/user_wrapper/user_wrapper_provider.dart b/lib/ui/common/user_wrapper/user_wrapper_provider.dart
deleted file mode 100644
index fdadd97..0000000
--- a/lib/ui/common/user_wrapper/user_wrapper_provider.dart
+++ /dev/null
@@ -1,15 +0,0 @@
-import 'package:flutter/material.dart';
-
-enum UserMode {passengerMode, driverMode}
-
-class UserWrapperProvider extends ChangeNotifier {
-  UserMode _userMode = UserMode.passengerMode;
-
-  UserMode get userMode => _userMode;
-
-  set userMode(UserMode value) {
-    _userMode = value;
-    notifyListeners();
-  }
-}
-
diff --git a/lib/ui/driver/components/driver_go_button.dart b/lib/ui/driver/components/driver_go_button.dart
index 1ac82c4..9edfef3 100644
--- a/lib/ui/driver/components/driver_go_button.dart
+++ b/lib/ui/driver/components/driver_go_button.dart
@@ -1,4 +1,4 @@
-import 'package:ap_lanes/ui/driver/driver_home_provider.dart';
+import 'package:ap_lanes/ui/driver/driver_home_state.dart';
 import 'package:flutter/material.dart';
 import 'package:provider/provider.dart';
 
@@ -7,7 +7,7 @@ class DriverGoButton extends StatelessWidget {
 
   @override
   Widget build(BuildContext context) {
-    final state = Provider.of<DriverHomeProvider>(context);
+    final state = Provider.of<DriverHomeState>(context);
 
     if (state.driverState == DriverState.ongoing) return const SizedBox.shrink();
 
diff --git a/lib/ui/driver/components/journey_request_popup.dart b/lib/ui/driver/components/journey_request_popup.dart
index f9950d2..39a358d 100644
--- a/lib/ui/driver/components/journey_request_popup.dart
+++ b/lib/ui/driver/components/journey_request_popup.dart
@@ -1,6 +1,6 @@
-import 'package:ap_lanes/ui/common/map_view/map_view_provider.dart';
-import 'package:ap_lanes/ui/driver/components/journey_request_popup_provider.dart';
-import 'package:ap_lanes/ui/driver/driver_home_provider.dart';
+import 'package:ap_lanes/ui/common/map_view/map_view_state.dart';
+import 'package:ap_lanes/ui/driver/components/journey_request_popup_state.dart';
+import 'package:ap_lanes/ui/driver/driver_home_state.dart';
 import 'package:collection/collection.dart';
 import 'package:flutter/material.dart';
 import 'package:provider/provider.dart';
@@ -12,11 +12,11 @@ class JourneyRequestPopup extends StatelessWidget {
 
   @override
   Widget build(BuildContext context) {
-    final state = Provider.of<DriverHomeProvider>(context);
+    final state = Provider.of<DriverHomeState>(context);
     if (state.driverState != DriverState.searching) return const SizedBox.shrink();
-    final requestState = Provider.of<JourneyRequestPopupProvider>(context);
+    final requestState = Provider.of<JourneyRequestPopupState>(context);
 
-    final MapViewProvider mapViewState = context.watch<MapViewProvider>();
+    final MapViewState mapViewState = context.watch<MapViewState>();
 
     final isBusy = requestState.availableJourney == null || requestState.isLoadingJourneyRequests;
 
diff --git a/lib/ui/driver/components/journey_request_popup_provider.dart b/lib/ui/driver/components/journey_request_popup_provider.dart
deleted file mode 100644
index a9eaa6a..0000000
--- a/lib/ui/driver/components/journey_request_popup_provider.dart
+++ /dev/null
@@ -1,257 +0,0 @@
-import 'dart:async';
-
-import 'package:ap_lanes/data/model/remote/journey.dart';
-import 'package:ap_lanes/data/model/remote/user.dart';
-import 'package:ap_lanes/data/repo/journey_repo.dart';
-import 'package:ap_lanes/data/repo/user_repo.dart';
-import 'package:ap_lanes/services/place_service.dart';
-import 'package:ap_lanes/ui/common/map_view/map_view_provider.dart';
-import 'package:ap_lanes/ui/driver/driver_home_provider.dart';
-import 'package:cloud_firestore/cloud_firestore.dart';
-import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;
-import 'package:flutter/material.dart';
-import 'package:flutter_map/flutter_map.dart';
-import 'package:provider/provider.dart';
-
-class JourneyRequestPopupProvider extends ChangeNotifier {
-  final BuildContext _context;
-  late final firebase_auth.User? _firebaseUser;
-  late final MapViewProvider _mapViewState;
-  late final DriverHomeProvider _driverHomeState;
-
-  StreamSubscription<MapEntry<DriverState, dynamic>>? _onDriverStateChangedListener;
-  StreamSubscription<QuerySnapshot<Journey>>? _initialJourneysListener;
-
-  JourneyRequestPopupProvider(this._context) {
-    _firebaseUser = Provider.of<firebase_auth.User?>(_context, listen: false);
-    _mapViewState = Provider.of<MapViewProvider>(_context, listen: false);
-    _driverHomeState = Provider.of<DriverHomeProvider>(_context, listen: false);
-    _onDriverStateChangedListener = _driverHomeState.onDriverStateChanged.listen(onDriverStateChangedCallback);
-
-    if (_driverHomeState.driverState == DriverState.searching) {
-      fetchInitialJourneys();
-      debugPrint("Ran initial fetch");
-    }
-  }
-
-  @override
-  void dispose() async {
-    super.dispose();
-    // await _onDriverStateChangedListener?.cancel();
-    await _initialJourneysListener?.cancel();
-    _initialJourneysListener = null;
-  }
-
-  final _userRepo = UserRepo();
-  final _journeyRepo = JourneyRepo();
-  final _placeService = PlaceService();
-
-  QueryDocumentSnapshot<User>? _availableJourneyPassenger;
-
-  QueryDocumentSnapshot<User>? get availableJourneyPassenger => _availableJourneyPassenger;
-
-  set availableJourneyPassenger(QueryDocumentSnapshot<User>? value) {
-    _availableJourneyPassenger = value;
-    notifyListeners();
-  }
-
-  QueryDocumentSnapshot<Journey>? _availableJourney;
-
-  QueryDocumentSnapshot<Journey>? get availableJourney => _availableJourney;
-
-  set availableJourney(QueryDocumentSnapshot<Journey>? value) {
-    _availableJourney = value;
-    notifyListeners();
-  }
-
-  QuerySnapshot<Journey>? _availableJourneys;
-
-  QuerySnapshot<Journey>? get availableJourneys => _availableJourneys;
-
-  set availableJourneys(QuerySnapshot<Journey>? value) {
-    _availableJourneys = value;
-    notifyListeners();
-  }
-
-  double _routeDistance = 0;
-
-  double get routeDistance => _routeDistance;
-
-  set routeDistance(double value) {
-    _routeDistance = value;
-    notifyListeners();
-  }
-
-  int _currentJourneyIndex = 0;
-
-  bool _isLoadingJourneyRequests = true;
-
-  bool get isLoadingJourneyRequests => _isLoadingJourneyRequests;
-
-  set isLoadingJourneyRequests(bool value) {
-    _isLoadingJourneyRequests = value;
-    notifyListeners();
-  }
-
-  Future<void> updateAvailableJourney(QueryDocumentSnapshot<Journey>? journey) async {
-    if (journey != null) {
-      _availableJourney = journey;
-      _availableJourneyPassenger = await _userRepo.getUser(journey.data().userId);
-      await updateJourneyRoutePolylines(journey.data());
-    } else {
-      resetAvailableJourneys();
-    }
-    notifyListeners();
-  }
-
-  Future<void> updateJourneyRoutePolylines(Journey journey) async {
-    try {
-      final start = journey.startLatLng;
-      final end = journey.endLatLng;
-      final polylines = await _placeService.fetchRoute(start, end);
-      _mapViewState.polylines.clear();
-      _mapViewState.polylines.add(polylines);
-      _mapViewState.shouldCenter = false;
-      _mapViewState.setCameraToRoute(
-        topOffsetPercentage: 1,
-        bottomOffsetPercentage: 0.2,
-      );
-      _mapViewState.markers["start"] = Marker(
-        point: start,
-        builder: (_) => const Icon(Icons.location_pin, size: 35, color: Colors.black),
-      );
-      _mapViewState.markers["destination"] = Marker(
-        point: end,
-        builder: (_) => const Icon(Icons.location_pin, size: 35, color: Colors.black),
-      );
-      _mapViewState.notifyListeners();
-    } on Exception catch (e) {
-      ScaffoldMessenger.of(_context)
-          .showSnackBar(const SnackBar(content: Text("The journey location retrieved was invalid.")));
-    }
-  }
-
-  void onRequestPopupNavigate(RequestNavigationDirection direction, BuildContext context) async {
-    isLoadingJourneyRequests = true;
-    QueryDocumentSnapshot<Journey>? journeyToShow = _availableJourney;
-    switch (direction) {
-      case RequestNavigationDirection.forward:
-        if ((_currentJourneyIndex + 1) <= availableJourneys!.size - 1) {
-          _currentJourneyIndex++;
-          journeyToShow = availableJourneys!.docs.elementAt(_currentJourneyIndex);
-        } else {
-          final nextJourneys = await _journeyRepo.getNextJourneyRequest(_firebaseUser!.uid, availableJourney!);
-
-          if (nextJourneys.size > 0) {
-            _availableJourneys = nextJourneys;
-            _currentJourneyIndex = 0;
-            journeyToShow = availableJourneys!.docs.elementAt(_currentJourneyIndex);
-            await _initialJourneysListener?.cancel();
-            _initialJourneysListener = null;
-          } else {
-            if (context.mounted) {
-              ScaffoldMessenger.of(context).showSnackBar(
-                const SnackBar(
-                  content: Text("Reached end of request list."),
-                ),
-              );
-            }
-          }
-        }
-        break;
-      case RequestNavigationDirection.backward:
-        if ((_currentJourneyIndex - 1) >= 0) {
-          _currentJourneyIndex--;
-          journeyToShow = availableJourneys!.docs.elementAt(_currentJourneyIndex);
-        } else {
-          final previousJourneys = await _journeyRepo.getPrevJourneyRequest(_firebaseUser!.uid, availableJourney!);
-
-          if (previousJourneys.size > 0) {
-            _availableJourneys = previousJourneys;
-            _currentJourneyIndex = availableJourneys!.size - 1;
-            journeyToShow = availableJourneys!.docs.elementAt(_currentJourneyIndex);
-            await _initialJourneysListener?.cancel();
-            _initialJourneysListener = null;
-          } else {
-            if (context.mounted) {
-              ScaffoldMessenger.of(context).showSnackBar(
-                const SnackBar(
-                  content: Text("Reached start of request list."),
-                ),
-              );
-            }
-          }
-        }
-        break;
-    }
-    await updateAvailableJourney(journeyToShow);
-    isLoadingJourneyRequests = false;
-    notifyListeners();
-  }
-
-  Future<void> fetchInitialJourneys() async {
-    _isLoadingJourneyRequests = true;
-    _initialJourneysListener ??= _journeyRepo.getFirstJourneyRequest(_firebaseUser!.uid).listen((snap) async {
-      _availableJourneys = snap;
-      final journeyIndex = _currentJourneyIndex > (snap.size - 1) ? snap.size - 1 : _currentJourneyIndex;
-      final journeyToShow = snap.size > 0 ? snap.docs.elementAt(journeyIndex) : null;
-      await updateAvailableJourney(journeyToShow);
-      _isLoadingJourneyRequests = false;
-      notifyListeners();
-    });
-  }
-
-  void resetAvailableJourneys() {
-    _currentJourneyIndex = 0;
-    _mapViewState.polylines.clear();
-    _mapViewState.markers.removeWhere((key, value) => key == "start" || key == "destination");
-    _mapViewState.notifyListeners();
-    _availableJourneys = null;
-    _availableJourney = null;
-    _availableJourneyPassenger = null;
-    notifyListeners();
-  }
-
-  void onJourneyAccept() async {
-    try {
-      await _journeyRepo.acceptJourneyRequest(_availableJourney!, _firebaseUser!.uid);
-
-      _driverHomeState.stopSearching();
-
-      await _initialJourneysListener?.cancel();
-      _initialJourneysListener = null;
-
-      _driverHomeState.didAcceptJourneyRequest(availableJourney!);
-    } catch (e) {
-      if (_context.mounted) {
-        ScaffoldMessenger.of(_context).showSnackBar(
-          SnackBar(
-            content: Text(e.toString()),
-          ),
-        );
-      }
-    }
-  }
-
-  void onDriverStateChangedCallback(MapEntry<DriverState, dynamic> state) {
-    if (!_context.mounted) return;
-    switch (state.key) {
-      case DriverState.idle:
-        resetAvailableJourneys();
-        _initialJourneysListener?.cancel();
-        _initialJourneysListener = null;
-        break;
-      case DriverState.searching:
-        fetchInitialJourneys();
-        break;
-      case DriverState.ongoing:
-        // nothing
-        break;
-    }
-  }
-}
-
-enum RequestNavigationDirection {
-  forward,
-  backward,
-}
diff --git a/lib/ui/driver/components/ongoing_journey_popup.dart b/lib/ui/driver/components/ongoing_journey_popup.dart
index 1dda7d7..593e0de 100644
--- a/lib/ui/driver/components/ongoing_journey_popup.dart
+++ b/lib/ui/driver/components/ongoing_journey_popup.dart
@@ -1,7 +1,7 @@
 import 'dart:async';
 
-import 'package:ap_lanes/ui/driver/components/ongoing_journey_popup_provider.dart';
-import 'package:ap_lanes/ui/driver/driver_home_provider.dart';
+import 'package:ap_lanes/ui/driver/components/ongoing_journey_popup_state.dart';
+import 'package:ap_lanes/ui/driver/driver_home_state.dart';
 import 'package:ap_lanes/util/location_helpers.dart';
 import 'package:flutter/material.dart';
 import 'package:flutter_svg/svg.dart';
@@ -22,7 +22,7 @@ class OngoingJourneyPopup extends StatefulWidget {
 
 class _OngoingJourneyPopupState extends State<OngoingJourneyPopup> {
   void _handleNavigationAppLaunch(String value) {
-    final state = Provider.of<OngoingJourneyPopupProvider>(context, listen: false);
+    final state = Provider.of<OngoingJourneyPopupState>(context, listen: false);
 
     Future<void> Function(LatLng latLng) launchFunction;
     switch (value) {
@@ -43,7 +43,7 @@ class _OngoingJourneyPopupState extends State<OngoingJourneyPopup> {
   }
 
   DriverAction _getCurrentDriverAction() {
-    final state = Provider.of<OngoingJourneyPopupProvider>(context, listen: false);
+    final state = Provider.of<OngoingJourneyPopupState>(context, listen: false);
 
     if (state.activeJourney == null) return DriverAction.idle;
 
@@ -67,7 +67,7 @@ class _OngoingJourneyPopupState extends State<OngoingJourneyPopup> {
   }
 
   String _getTargetLocation() {
-    final state = Provider.of<OngoingJourneyPopupProvider>(context, listen: false);
+    final state = Provider.of<OngoingJourneyPopupState>(context, listen: false);
 
     switch (_getCurrentDriverAction()) {
       case DriverAction.droppingOff:
@@ -82,11 +82,11 @@ class _OngoingJourneyPopupState extends State<OngoingJourneyPopup> {
 
   @override
   Widget build(BuildContext context) {
-    final state = Provider.of<DriverHomeProvider>(context);
+    final state = Provider.of<DriverHomeState>(context);
 
     if (state.driverState != DriverState.ongoing) return const SizedBox.shrink();
 
-    final ongoingState = Provider.of<OngoingJourneyPopupProvider>(context);
+    final ongoingState = Provider.of<OngoingJourneyPopupState>(context);
 
     return Positioned.fill(
       left: 12,
diff --git a/lib/ui/driver/components/ongoing_journey_popup_provider.dart b/lib/ui/driver/components/ongoing_journey_popup_provider.dart
deleted file mode 100644
index b7edacf..0000000
--- a/lib/ui/driver/components/ongoing_journey_popup_provider.dart
+++ /dev/null
@@ -1,295 +0,0 @@
-import 'dart:async';
-
-import 'package:ap_lanes/data/model/remote/journey.dart';
-import 'package:ap_lanes/data/model/remote/user.dart';
-import 'package:ap_lanes/data/repo/journey_repo.dart';
-import 'package:ap_lanes/data/repo/user_repo.dart';
-import 'package:ap_lanes/services/driver_location_service.dart';
-import 'package:ap_lanes/services/notification_service.dart';
-import 'package:ap_lanes/ui/common/map_view/map_view_provider.dart';
-import 'package:ap_lanes/ui/driver/driver_home_provider.dart';
-import 'package:cloud_firestore/cloud_firestore.dart';
-import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;
-import 'package:flutter/material.dart';
-import 'package:flutter_map/flutter_map.dart';
-import 'package:geolocator/geolocator.dart';
-import 'package:latlong2/latlong.dart';
-import 'package:provider/provider.dart';
-
-class OngoingJourneyPopupProvider extends ChangeNotifier {
-  final BuildContext _context;
-  late final firebase_auth.User? _firebaseUser;
-  late final MapViewProvider _mapViewState;
-  late final DriverHomeProvider _driverHomeState;
-  late StreamSubscription<QueryDocumentSnapshot<Journey>?> _onJourneyRequestAcceptedListener;
-
-  QueryDocumentSnapshot<Journey>? _ongoingJourneyRequest;
-  bool _isLoadingJourneyRequest = false;
-  StreamSubscription<Position>? _driverLocationListener;
-  QueryDocumentSnapshot<Journey>? _activeJourney;
-  QueryDocumentSnapshot<User>? _activeJourneyPassenger;
-  StreamSubscription<QuerySnapshot<Journey>>? _activeJourneyListener;
-
-  final _userRepo = UserRepo();
-  final _journeyRepo = JourneyRepo();
-  final NotificationService notificationService = NotificationService();
-
-  bool get isLoadingJourneyRequest => _isLoadingJourneyRequest;
-
-  set isLoadingJourneyRequest(bool value) {
-    _isLoadingJourneyRequest = value;
-    notifyListeners();
-  }
-
-  QueryDocumentSnapshot<Journey>? get ongoingJourneyRequest => _ongoingJourneyRequest;
-
-  set ongoingJourneyRequest(QueryDocumentSnapshot<Journey>? value) {
-    _ongoingJourneyRequest = value;
-    notifyListeners();
-  }
-
-  QueryDocumentSnapshot<Journey>? get activeJourney => _activeJourney;
-
-  set activeJourney(QueryDocumentSnapshot<Journey>? value) {
-    _activeJourney = value;
-    notifyListeners();
-  }
-
-  QueryDocumentSnapshot<User>? get activeJourneyPassenger => _activeJourneyPassenger;
-
-  set activeJourneyPassenger(QueryDocumentSnapshot<User>? value) {
-    _activeJourneyPassenger = value;
-    notifyListeners();
-  }
-
-  StreamSubscription<QuerySnapshot<Journey>>? get activeJourneyListener => _activeJourneyListener;
-
-  set activeJourneyListener(StreamSubscription<QuerySnapshot<Journey>>? value) {
-    _activeJourneyListener = value;
-    notifyListeners();
-  }
-
-  OngoingJourneyPopupProvider(this._context) {
-    _firebaseUser = Provider.of<firebase_auth.User?>(_context, listen: false);
-    _mapViewState = Provider.of<MapViewProvider>(_context, listen: false);
-    _driverHomeState = Provider.of<DriverHomeProvider>(_context, listen: false);
-    _onJourneyRequestAcceptedListener =
-        _driverHomeState.onJourneyRequestAccepted.listen(onJourneyRequestAcceptedCallback);
-  }
-
-  @override
-  void dispose() {
-    _onJourneyRequestAcceptedListener.cancel();
-    stopOngoingJourneyListenerAndCleanUp();
-    super.dispose();
-  }
-
-  void onJourneyRequestAcceptedCallback(QueryDocumentSnapshot<Journey>? event) {
-    startOngoingJourneyListener();
-  }
-
-  void updateCameraBoundsWithPopup(LatLng start, LatLng end) {
-    _mapViewState.shouldCenter = false;
-    _mapViewState.setCameraBetweenMarkers(
-      firstLatLng: start,
-      secondLatLng: end,
-      topOffsetPercentage: 1,
-      bottomOffsetPercentage: 0.2,
-    );
-  }
-
-  void updateActiveJourney(QueryDocumentSnapshot<Journey> journeySnapshot) async {
-    _activeJourney = journeySnapshot;
-    _activeJourneyPassenger = await _userRepo.getUser(journeySnapshot.data().userId);
-
-    if (journeySnapshot.data().isPickedUp) {
-      _mapViewState.markers["drop-off"] = Marker(
-        point: journeySnapshot.data().endLatLng,
-        builder: (_) => const Icon(Icons.location_pin, size: 35, color: Colors.black),
-      );
-      if (_mapViewState.currentPosition != null) {
-        updateCameraBoundsWithPopup(_mapViewState.currentPosition!, journeySnapshot.data().endLatLng);
-      }
-    } else {
-      _mapViewState.markers["pick-up"] = Marker(
-        point: journeySnapshot.data().startLatLng,
-        builder: (_) => const Icon(Icons.location_pin, size: 35, color: Colors.black),
-      );
-      if (_mapViewState.currentPosition != null) {
-        updateCameraBoundsWithPopup(_mapViewState.currentPosition!, journeySnapshot.data().endLatLng);
-      }
-    }
-    notifyListeners();
-  }
-
-  void handleActiveJourneyDisappear() async {
-    if (_activeJourney == null) return;
-
-    final previousJourney = await _activeJourney!.reference.get();
-    if (!previousJourney.exists || previousJourney.data()!.isCancelled) {
-      notificationService.notifyDriver("Journey Cancelled", body: "The journey has been cancelled by the passenger");
-      stopOngoingJourneyListenerAndCleanUp();
-      if (_context.mounted) {
-        await showDialog(
-          context: _context,
-          builder: (context) => AlertDialog(
-            title: const Text("Journey Cancelled"),
-            content: const Text("The journey has been cancelled by the passenger."),
-            actions: [
-              TextButton(
-                onPressed: () => Navigator.of(context).pop(),
-                style: TextButton.styleFrom(
-                  textStyle: Theme.of(context).textTheme.labelLarge,
-                ),
-                child: const Text("Ok"),
-              )
-            ],
-          ),
-        );
-      }
-    }
-  }
-
-  void startOngoingJourneyListener() async {
-    isLoadingJourneyRequest = true;
-
-    _activeJourneyListener ??= _journeyRepo.getOngoingJourneyStream(_firebaseUser!.uid).listen((snap) async {
-      final hasOngoingJourney = snap.size > 0;
-
-      if (hasOngoingJourney) {
-        _mapViewState.shouldCenter = false;
-        if (!DriverLocationService.isRegistered) {
-          DriverLocationService.registerDriverLocationBackgroundService(_driverHomeState.driver);
-        }
-        updateActiveJourney(snap.docs.first);
-        isLoadingJourneyRequest = false;
-      } else {
-        handleActiveJourneyDisappear();
-      }
-    });
-
-    _registerDriverLocationListener();
-
-    notifyListeners();
-  }
-
-  void stopOngoingJourneyListenerAndCleanUp() async {
-    await _unregisterActiveJourneyListener();
-    await _unregisterDriverLocationListener();
-    _activeJourney = null;
-    _activeJourneyPassenger = null;
-    DriverLocationService.unregisterDriverLocationBackgroundService();
-
-    try {
-      _mapViewState.shouldCenter = true;
-      _mapViewState.markers.remove("drop-off");
-      _mapViewState.markers.remove("pick-up");
-      _driverHomeState.driverState = DriverState.idle;
-      _mapViewState.resetCamera();
-      notifyListeners();
-    } catch (e) {
-      debugPrint(e.toString());
-    }
-  }
-
-  Future<void> _unregisterActiveJourneyListener() async {
-    await _activeJourneyListener?.cancel();
-    _activeJourneyListener = null;
-  }
-
-  Future<void> _registerDriverLocationListener() async {
-    _driverLocationListener ??= Geolocator.getPositionStream(
-      locationSettings: const LocationSettings(accuracy: LocationAccuracy.bestForNavigation),
-    ).listen((position) {
-      if (_activeJourney == null) return;
-
-      final latLng = LatLng(position.latitude, position.longitude);
-
-      LatLng targetLatLng =
-          _activeJourney!.data().isPickedUp ? _activeJourney!.data().endLatLng : _activeJourney!.data().startLatLng;
-      updateCameraBoundsWithPopup(latLng, targetLatLng);
-    });
-  }
-
-  Future<void> _unregisterDriverLocationListener() async {
-    await _driverLocationListener?.cancel();
-    _driverLocationListener = null;
-  }
-
-  void onJourneyDropOff() async {
-    bool? shouldDropOff = await requestDropOffConfirmation();
-
-    if (shouldDropOff == null || shouldDropOff == false) {
-      return;
-    }
-    try {
-      await _journeyRepo.completeJourney(_activeJourney);
-      stopOngoingJourneyListenerAndCleanUp();
-    } catch (e) {
-      if (_context.mounted) {
-        ScaffoldMessenger.of(_context).showSnackBar(
-          SnackBar(
-            content: Text(
-              e.toString(),
-            ),
-          ),
-        );
-      }
-    }
-  }
-
-  Future<bool?> requestDropOffConfirmation() async {
-    bool? shouldDropOff = await showDialog<bool>(
-      context: _context,
-      builder: (ctx) {
-        return AlertDialog(
-          title: const Text("Confirm Drop-off?"),
-          content: const Text('Are you sure you want to mark this journey as complete?'),
-          actions: <Widget>[
-            TextButton(
-              onPressed: () => Navigator.pop(_context, false),
-              child: const Text('No'),
-            ),
-            TextButton(
-              onPressed: () => Navigator.pop(_context, true),
-              child: const Text('Yes'),
-            ),
-          ],
-        );
-      },
-    );
-    return shouldDropOff;
-  }
-
-  void onJourneyPickUp() async {
-    isLoadingJourneyRequest = true;
-    try {
-      bool isPickedUp = await _journeyRepo.updateJourneyPickUpStatus(activeJourney);
-      if (isPickedUp) {
-        _mapViewState.markers.remove("pick-up");
-        _mapViewState.markers["pick-up"] = Marker(
-          point: activeJourney!.data().endLatLng,
-          builder: (_) => const Icon(Icons.location_pin, size: 35, color: Colors.black),
-        );
-        updateCameraBoundsWithPopup(_mapViewState.currentPosition!, activeJourney!.data().endLatLng);
-      } else {
-        _mapViewState.markers.remove("drop-off");
-        _mapViewState.markers["pick-up"] = Marker(
-          point: activeJourney!.data().startLatLng,
-          builder: (_) => const Icon(Icons.location_pin, size: 35, color: Colors.black),
-        );
-        updateCameraBoundsWithPopup(_mapViewState.currentPosition!, activeJourney!.data().startLatLng);
-      }
-    } catch (e) {
-      ScaffoldMessenger.of(_context).showSnackBar(
-        SnackBar(
-          content: Text(
-            e.toString(),
-          ),
-        ),
-      );
-    } finally {
-      isLoadingJourneyRequest = false;
-    }
-  }
-}
diff --git a/lib/ui/driver/driver_home.dart b/lib/ui/driver/driver_home.dart
index d27eb62..ca874ed 100644
--- a/lib/ui/driver/driver_home.dart
+++ b/lib/ui/driver/driver_home.dart
@@ -1,12 +1,12 @@
 import 'package:ap_lanes/ui/common/app_drawer/app_drawer.dart';
-import 'package:ap_lanes/ui/common/app_drawer/app_drawer_provider.dart';
+import 'package:ap_lanes/ui/common/app_drawer/app_drawer_state.dart';
 import 'package:ap_lanes/ui/common/map_view/map_view.dart';
 import 'package:ap_lanes/ui/driver/components/driver_go_button.dart';
 import 'package:ap_lanes/ui/driver/components/journey_request_popup.dart';
-import 'package:ap_lanes/ui/driver/components/journey_request_popup_provider.dart';
+import 'package:ap_lanes/ui/driver/components/journey_request_popup_state.dart';
 import 'package:ap_lanes/ui/driver/components/ongoing_journey_popup.dart';
-import 'package:ap_lanes/ui/driver/components/ongoing_journey_popup_provider.dart';
-import 'package:ap_lanes/ui/driver/driver_home_provider.dart';
+import 'package:ap_lanes/ui/driver/components/ongoing_journey_popup_state.dart';
+import 'package:ap_lanes/ui/driver/driver_home_state.dart';
 import 'package:flutter/material.dart';
 import 'package:provider/provider.dart';
 
@@ -17,13 +17,13 @@ class DriverHome extends StatelessWidget {
 
   @override
   Widget build(BuildContext context) {
-    final state = Provider.of<DriverHomeProvider>(context);
+    final state = Provider.of<DriverHomeState>(context);
 
     return (state.user == null)
         ? const Scaffold(body: Center(child: CircularProgressIndicator()))
         : Scaffold(
-            drawer: ChangeNotifierProvider<AppDrawerProvider>(
-              create: (context) => AppDrawerProvider(context),
+            drawer: ChangeNotifierProvider<AppDrawerState>(
+              create: (context) => AppDrawerState(context),
               child: AppDrawer(
                 isDriverMode: true,
                 user: state.user,
@@ -49,12 +49,12 @@ class DriverHome extends StatelessWidget {
               children: [
                 const MapView(),
                 const DriverGoButton(),
-                ChangeNotifierProvider<JourneyRequestPopupProvider>(
-                  create: (ctx) => JourneyRequestPopupProvider(ctx),
+                ChangeNotifierProvider<JourneyRequestPopupState>(
+                  create: (ctx) => JourneyRequestPopupState(ctx),
                   child: const JourneyRequestPopup(),
                 ),
-                ChangeNotifierProvider<OngoingJourneyPopupProvider>(
-                  create: (ctx) => OngoingJourneyPopupProvider(ctx),
+                ChangeNotifierProvider<OngoingJourneyPopupState>(
+                  create: (ctx) => OngoingJourneyPopupState(ctx),
                   child: const OngoingJourneyPopup(),
                 ),
               ],
diff --git a/lib/ui/driver/driver_home_provider.dart b/lib/ui/driver/driver_home_provider.dart
deleted file mode 100644
index 4755160..0000000
--- a/lib/ui/driver/driver_home_provider.dart
+++ /dev/null
@@ -1,207 +0,0 @@
-import 'dart:async';
-
-import 'package:ap_lanes/data/model/remote/driver.dart';
-import 'package:ap_lanes/data/model/remote/journey.dart';
-import 'package:ap_lanes/data/model/remote/user.dart';
-import 'package:ap_lanes/data/repo/driver_repo.dart';
-import 'package:ap_lanes/data/repo/journey_repo.dart';
-import 'package:ap_lanes/data/repo/user_repo.dart';
-import 'package:ap_lanes/ui/common/map_view/map_view_provider.dart';
-import 'package:ap_lanes/ui/common/user_wrapper/user_wrapper_provider.dart';
-import 'package:ap_lanes/ui/driver/components/setup_driver_profile_dialog.dart';
-import 'package:cloud_firestore/cloud_firestore.dart';
-import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;
-import 'package:flutter/material.dart';
-import 'package:provider/provider.dart';
-
-enum DriverState {
-  idle,
-  searching,
-  ongoing,
-}
-
-class DriverHomeProvider extends ChangeNotifier {
-  final BuildContext _context;
-  late final firebase_auth.User? _firebaseUser;
-  late final MapViewProvider _mapViewState;
-
-  QueryDocumentSnapshot<User>? _user;
-  QueryDocumentSnapshot<Driver>? _driver;
-  DriverState _driverState = DriverState.idle;
-
-  QueryDocumentSnapshot<User>? get user => _user;
-
-  set user(QueryDocumentSnapshot<User>? value) {
-    _user = value;
-    notifyListeners();
-  }
-
-  QueryDocumentSnapshot<Driver>? get driver => _driver;
-
-  set driver(QueryDocumentSnapshot<Driver>? value) {
-    _driver = value;
-    notifyListeners();
-  }
-
-  DriverState get driverState => _driverState;
-
-  set driverState(DriverState value) {
-    _driverState = value;
-    notifyListeners();
-  }
-
-  late final StreamController<MapEntry<DriverState, dynamic>> _onDriverStateStreamController;
-  late final Stream<MapEntry<DriverState, dynamic>> onDriverStateChanged;
-
-  late final StreamController<QueryDocumentSnapshot<Journey>?> _onJourneyRequestAcceptedStreamController;
-  late final Stream<QueryDocumentSnapshot<Journey>?> onJourneyRequestAccepted;
-
-  final _userRepo = UserRepo();
-  final _driverRepo = DriverRepo();
-  final _journeyRepo = JourneyRepo();
-
-  DriverHomeProvider(this._context) {
-    _onDriverStateStreamController = StreamController.broadcast();
-    onDriverStateChanged = _onDriverStateStreamController.stream;
-
-    _onJourneyRequestAcceptedStreamController = StreamController();
-    onJourneyRequestAccepted = _onJourneyRequestAcceptedStreamController.stream;
-
-    _mapViewState = Provider.of<MapViewProvider>(_context, listen: false);
-    initializeFirebase();
-  }
-
-  @override
-  void dispose() async {
-    super.dispose();
-
-    await _onDriverStateStreamController.close();
-    await _onJourneyRequestAcceptedStreamController.close();
-  }
-
-  Future<void> initializeFirebase() async {
-    _firebaseUser = Provider.of<firebase_auth.User?>(_context, listen: false);
-    if (_firebaseUser == null) throw Exception("Firebase user is null!");
-
-    final existingUser = await _userRepo.getUser(_firebaseUser!.uid);
-    if (existingUser == null) throw Exception("User profile does not exist!");
-    user = existingUser;
-
-    final existingDriver = await _driverRepo.getDriver(_firebaseUser!.uid);
-    if (existingDriver != null) {
-      driver = existingDriver;
-    } else {
-      final setupResult = await showDriverSetupDialog();
-      if (setupResult == false) {
-        _context.read<UserWrapperProvider>().userMode = UserMode.passengerMode;
-        return;
-      }
-    }
-
-    if (!driver!.data().isVerified) {
-      if (_context.mounted) {
-        await showDialog(
-          context: _context,
-          builder: (context) => AlertDialog(
-            title: const Text("Awaiting Verification"),
-            content: const Text(
-              "You have already setup your driver profile. However, we still need to verify your identity. Until your account gets verified, you are unable to start driving.",
-            ),
-            actions: [
-              TextButton(
-                onPressed: () => Navigator.of(context).pop(),
-                style: TextButton.styleFrom(
-                  textStyle: Theme.of(context).textTheme.labelLarge,
-                ),
-                child: const Text("Ok"),
-              )
-            ],
-          ),
-        );
-      }
-      if (!_context.mounted) return;
-      _context.read<UserWrapperProvider>().userMode = UserMode.passengerMode;
-      return;
-    }
-
-    final hasPreviousOngoingJourney = await _journeyRepo.hasOngoingJourney(_firebaseUser!.uid);
-    if (hasPreviousOngoingJourney) {
-      didAcceptJourneyRequest(null);
-    }
-  }
-
-  bool isLoading() {
-    return user == null || driver == null;
-  }
-
-  Future<bool> showDriverSetupDialog() async {
-    var result = await showDialog<String?>(
-      context: _context,
-      builder: (ctx) => SetupDriverProfileDialog(userId: _firebaseUser!.uid),
-    );
-
-    if (result == 'Save') {
-      var driverSnapshot = await _driverRepo.getDriver(_firebaseUser!.uid);
-      if (driverSnapshot == null) throw Exception("Driver profile does not exist!");
-      driver = driverSnapshot;
-      return true;
-    }
-
-    if (!_context.mounted) return false;
-    await showDialog(
-      context: _context,
-      builder: (ctx) => AlertDialog(
-        content: const Text('You need to set up a driver profile before you can start driving.'),
-        title: const Text('Driver profile not set up'),
-        actions: [
-          TextButton(
-            onPressed: () {
-              Navigator.of(_context).pop('Ok');
-            },
-            child: const Text('Ok'),
-          ),
-        ],
-      ),
-    );
-
-    return false;
-  }
-
-  void startSearching() async {
-    _driverState = DriverState.searching;
-
-    await _driverRepo.updateDriver(driver!, {'isAvailable': true});
-
-    _onDriverStateStreamController.add(const MapEntry(DriverState.searching, null));
-    notifyListeners();
-  }
-
-  void stopSearching() async {
-    _driverState = DriverState.idle;
-
-    await _driverRepo.updateDriver(driver!, {'isAvailable': false});
-
-    _onDriverStateStreamController.add(const MapEntry(DriverState.idle, null));
-
-    clearMapRoute();
-
-    notifyListeners();
-  }
-
-  void clearMapRoute() {
-    _mapViewState.polylines.clear();
-    _mapViewState.markers.remove("start");
-    _mapViewState.markers.remove("destination");
-    _mapViewState.shouldCenter = true;
-    _mapViewState.notifyListeners();
-
-    _mapViewState.resetCamera();
-  }
-
-  void didAcceptJourneyRequest(QueryDocumentSnapshot<Journey>? acceptedJourneyRequest) {
-    _driverState = DriverState.ongoing;
-    _onDriverStateStreamController.add(const MapEntry(DriverState.ongoing, null));
-    _onJourneyRequestAcceptedStreamController.add(acceptedJourneyRequest);
-    notifyListeners();
-  }
-}
diff --git a/lib/ui/passenger/components/driver_detail.dart b/lib/ui/passenger/components/driver_detail.dart
index da285dc..15514a8 100644
--- a/lib/ui/passenger/components/driver_detail.dart
+++ b/lib/ui/passenger/components/driver_detail.dart
@@ -1,4 +1,4 @@
-import 'package:ap_lanes/ui/passenger/passenger_home_provider.dart';
+import 'package:ap_lanes/ui/passenger/passenger_home_state.dart';
 import 'package:flutter/material.dart';
 import 'package:flutter_svg/svg.dart';
 import 'package:provider/provider.dart';
@@ -11,7 +11,7 @@ class DriverDetail extends StatelessWidget {
 
   @override
   Widget build(BuildContext context) {
-    final state = context.watch<PassengerHomeProvider>();
+    final state = context.watch<PassengerHomeState>();
 
     if (!state.hasDriver) return const SizedBox.shrink();
 
diff --git a/lib/ui/passenger/components/journey_detail.dart b/lib/ui/passenger/components/journey_detail.dart
index 8d3d7a2..09a9192 100644
--- a/lib/ui/passenger/components/journey_detail.dart
+++ b/lib/ui/passenger/components/journey_detail.dart
@@ -2,14 +2,14 @@ import 'package:flutter/material.dart';
 import 'package:provider/provider.dart';
 
 import '../../../util/location_helpers.dart';
-import '../passenger_home_provider.dart';
+import '../passenger_home_state.dart';
 
 class JourneyDetail extends StatelessWidget {
   const JourneyDetail({super.key});
 
   @override
   Widget build(BuildContext context) {
-    final state = Provider.of<PassengerHomeProvider>(context);
+    final state = Provider.of<PassengerHomeState>(context);
 
     if (!state.isSearching && !state.hasDriver) return const SizedBox.shrink();
 
diff --git a/lib/ui/passenger/components/passenger_go_button.dart b/lib/ui/passenger/components/passenger_go_button.dart
index 4b3ee41..a400706 100644
--- a/lib/ui/passenger/components/passenger_go_button.dart
+++ b/lib/ui/passenger/components/passenger_go_button.dart
@@ -2,7 +2,7 @@ import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;
 import 'package:flutter/material.dart';
 import 'package:provider/provider.dart';
 
-import '../passenger_home_provider.dart';
+import '../passenger_home_state.dart';
 
 class PassengerGoButton extends StatelessWidget {
   const PassengerGoButton({super.key});
@@ -10,7 +10,7 @@ class PassengerGoButton extends StatelessWidget {
   @override
   Widget build(BuildContext context) {
     final firebaseUser = context.watch<firebase_auth.User?>();
-    final state = Provider.of<PassengerHomeProvider>(context);
+    final state = Provider.of<PassengerHomeState>(context);
 
     if (state.routeDistance == null && !state.isSearching) return const SizedBox.shrink();
 
diff --git a/lib/ui/passenger/components/search_bar.dart b/lib/ui/passenger/components/search_bar.dart
index 28459c8..a5721f7 100644
--- a/lib/ui/passenger/components/search_bar.dart
+++ b/lib/ui/passenger/components/search_bar.dart
@@ -1,11 +1,11 @@
-import 'package:ap_lanes/ui/common/map_view/map_view_provider.dart';
+import 'package:ap_lanes/ui/common/map_view/map_view_state.dart';
 import 'package:flutter/material.dart';
 import 'package:flutter_typeahead/flutter_typeahead.dart';
 import 'package:provider/provider.dart';
 
 import '../../../services/place_service.dart';
 import '../../../util/location_helpers.dart';
-import '../passenger_home_provider.dart';
+import '../passenger_home_state.dart';
 
 class SearchBar extends StatelessWidget {
   final _placeService = PlaceService();
@@ -14,8 +14,8 @@ class SearchBar extends StatelessWidget {
 
   @override
   Widget build(BuildContext context) {
-    final state = context.read<PassengerHomeProvider>();
-    final mapViewState = context.watch<MapViewProvider>();
+    final state = context.read<PassengerHomeState>();
+    final mapViewState = context.watch<MapViewState>();
     String lang = Localizations.localeOf(context).languageCode;
 
     if (state.isSearching || state.hasDriver || mapViewState.currentPosition == null) return const SizedBox.shrink();
diff --git a/lib/ui/passenger/passenger_home.dart b/lib/ui/passenger/passenger_home.dart
index fe451f0..44f50ce 100644
--- a/lib/ui/passenger/passenger_home.dart
+++ b/lib/ui/passenger/passenger_home.dart
@@ -1,4 +1,4 @@
-import 'package:ap_lanes/ui/common/app_drawer/app_drawer_provider.dart';
+import 'package:ap_lanes/ui/common/app_drawer/app_drawer_state.dart';
 import 'package:ap_lanes/ui/passenger/components/driver_detail.dart';
 import 'package:flutter/material.dart';
 import 'package:provider/provider.dart';
@@ -9,14 +9,14 @@ import '../common/map_view/map_view.dart';
 import 'components/journey_detail.dart';
 import 'components/passenger_go_button.dart';
 import 'components/search_bar.dart' as passenger_view;
-import 'passenger_home_provider.dart';
+import 'passenger_home_state.dart';
 
 class PassengerHome extends StatelessWidget {
   const PassengerHome({Key? key}) : super(key: key);
 
   @override
   Widget build(BuildContext context) {
-    final state = Provider.of<PassengerHomeProvider>(context);
+    final state = Provider.of<PassengerHomeState>(context);
 
     return (state.user == null)
         ? const Scaffold(body: Center(child: CircularProgressIndicator()))
@@ -27,8 +27,8 @@ class PassengerHome extends StatelessWidget {
                 style: Theme.of(context).textTheme.titleMedium,
               ),
             ),
-            drawer: ChangeNotifierProvider<AppDrawerProvider>(
-              create: (context) => AppDrawerProvider(context),
+            drawer: ChangeNotifierProvider<AppDrawerState>(
+              create: (context) => AppDrawerState(context),
               child: AppDrawer(
                 isDriverMode: false,
                 user: state.user,
diff --git a/lib/ui/passenger/passenger_home_provider.dart b/lib/ui/passenger/passenger_home_provider.dart
deleted file mode 100644
index 97280fd..0000000
--- a/lib/ui/passenger/passenger_home_provider.dart
+++ /dev/null
@@ -1,450 +0,0 @@
-import 'dart:async';
-
-import 'package:ap_lanes/data/repo/driver_repo.dart';
-import 'package:ap_lanes/ui/common/map_view/map_view_provider.dart';
-import 'package:cloud_firestore/cloud_firestore.dart';
-import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;
-import 'package:flutter/material.dart';
-import 'package:flutter_map/flutter_map.dart';
-import 'package:latlong2/latlong.dart';
-import 'package:provider/provider.dart';
-import 'package:uuid/uuid.dart';
-
-import '../../data/model/remote/driver.dart';
-import '../../data/model/remote/journey.dart';
-import '../../data/model/remote/user.dart';
-import '../../data/repo/journey_repo.dart';
-import '../../data/repo/user_repo.dart';
-import '../../services/notification_service.dart';
-import '../../services/place_service.dart';
-import '../../util/constants.dart';
-import '../../util/location_helpers.dart';
-
-class PassengerHomeProvider extends ChangeNotifier {
-
-  PassengerHomeProvider(this._context) {
-    initialize();
-  }
-
-  /*
-  * Variables
-  * */
-  final BuildContext _context;
-  late final MapViewProvider mapViewState;
-  final NotificationService notificationService = NotificationService();
-
-  final _driverRepo = DriverRepo();
-  final _journeyRepo = JourneyRepo();
-  final _userRepo = UserRepo();
-  final _placeService = PlaceService();
-
-  QueryDocumentSnapshot<User>? _user;
-  QueryDocumentSnapshot<Journey>? _journey;
-
-  StreamSubscription<QuerySnapshot<Journey>>? _journeyListener;
-  StreamSubscription<QuerySnapshot<Driver>>? _driverListener;
-
-  double? _routeDistance;
-  double? _routePrice;
-  LatLng? _destinationLatLng;
-  String? _destinationDescription;
-  bool _isSearching = false;
-  bool _isPickedUp = false;
-  bool _hasDriver = false;
-  bool _toApu = false;
-
-  String? _driverName;
-  String? _driverLicensePlate;
-  String? _driverPhone;
-  String? _vehicleManufacturer;
-  String? _vehicleModel;
-  String? _vehicleColor;
-
-  final _searchController = TextEditingController();
-  String _sessionToken = const Uuid().v4();
-
-
-  /*
-  * Functions
-  * */
-  @override
-  void dispose() {
-    _driverListener?.cancel();
-    _journeyListener?.cancel();
-    super.dispose();
-  }
-
-  Future<void> initialize() async {
-    _searchController.addListener(() => notifyListeners());
-    mapViewState = _context.read<MapViewProvider>();
-    initializeFirestore();
-  }
-
-  Future<void> initializeFirestore() async {
-    final firebaseUser = _context.read<firebase_auth.User?>();
-
-    if (firebaseUser != null) {
-      // Set user and last name
-      _user = (await _userRepo.getUser(firebaseUser.uid))!;
-      notifyListeners();
-
-      _journeyListener = _journeyRepo.listenForJourney(firebaseUser.uid).listen((journey) async {
-        if (journey.docs.isNotEmpty) {
-          _journey = journey.docs.first;
-          notifyListeners();
-
-          if (_journey!.data().driverId.isNotEmpty) {
-            if (!_isPickedUp && _journey!.data().isPickedUp) {
-              notificationService.notifyPassenger("Your driver has picked you up!");
-            }
-            _isPickedUp = _journey!.data().isPickedUp == true;
-            notifyListeners();
-
-            // Get driver name
-            final driverId = _journey!.data().driverId;
-            await _userRepo.getUser(driverId).then((driver) {
-              if (driver != null) {
-                _driverName = driver.data().getFullName();
-                _driverPhone = driver.data().phoneNumber;
-              }
-            });
-
-            _driverRepo.getDriver(driverId).then((driver) {
-              if (driver != null) {
-                if (!_hasDriver) {
-                  notificationService.notifyPassenger("Driver has been found!",
-                      body:
-                      "Your driver for today is $_driverName. Look for the license plate $_driverLicensePlate to meet your driver.");
-                }
-
-                // Get driver details
-                _driverLicensePlate = driver.data().licensePlate;
-                _vehicleManufacturer = driver.data().vehicleManufacturer;
-                _vehicleModel = driver.data().vehicleModel;
-                _vehicleColor = driver.data().vehicleColor;
-                _hasDriver = true;
-
-                // Clear map state
-                _routeDistance = null;
-                _routePrice = null;
-                mapViewState.polylines.clear();
-                mapViewState.shouldCenter = false;
-                mapViewState.markers.remove("start");
-                mapViewState.markers.remove("destination");
-                _isSearching = false;
-
-
-                notifyListeners();
-
-                // Used to ensure multiple listen calls are not made
-                _driverListener ??= _driverRepo.listenToDriver(driverId).listen((driver) {
-                  if (driver.docs.isNotEmpty) {
-                    final latLng = driver.docs.first.data().currentLatLng;
-                    if (latLng != null && mapViewState.currentPosition != null) {
-                      mapViewState.markers["driver"] = Marker(
-                        point: latLng,
-                        builder: (_) => const Icon(Icons.drive_eta, size: 35, color: Colors.black),
-                      );
-                      mapViewState.shouldCenter = false;
-                      mapViewState.setCameraBetweenMarkers(
-                        firstLatLng: latLng,
-                        secondLatLng: mapViewState.currentPosition!,
-                        topOffsetPercentage: 2,
-                        bottomOffsetPercentage: 1,
-                        leftOffsetPercentage: 1,
-                        rightOffsetPercentage: 1,
-                      );
-                      notifyListeners();
-                    }
-                  }
-                });
-              }
-            });
-          } else {
-            _isSearching = true;
-            _resetDriverDetails();
-            notifyListeners();
-          }
-        } else if (_journey != null) {
-          resetState();
-        }
-      });
-    }
-  }
-
-  void _resetDriverDetails() {
-    _hasDriver = false;
-    _driverName = null;
-    _driverPhone = null;
-    _driverLicensePlate = null;
-    _vehicleColor = null;
-    _vehicleManufacturer = null;
-    _vehicleColor = null;
-  }
-
-  void onDescription(description) {
-    _destinationDescription = description;
-    _sessionToken = const Uuid().v4();
-  }
-
-  Future<void> updateToApu(toApu) async {
-    _toApu = toApu;
-    notifyListeners();
-    if (_destinationLatLng != null) {
-      final start = _toApu ? _destinationLatLng! : apuLatLng;
-      final end = _toApu ? apuLatLng : _destinationLatLng!;
-      try {
-        await _placeService.fetchRoute(start, end).then((polylines) {
-          mapViewState.polylines.clear();
-          mapViewState.polylines.add(polylines);
-          mapViewState.shouldCenter = false;
-          mapViewState.setCameraToRoute(
-            topOffsetPercentage: 0.5,
-            bottomOffsetPercentage: 0.5,
-          );
-          _routeDistance = calculateRouteDistance(polylines);
-          _routePrice = calculateRoutePrice(_routeDistance!);
-          notifyListeners(); // Notifies when route is received
-        });
-      } on Exception catch (e) {
-        ScaffoldMessenger.of(_context).showSnackBar(
-            const SnackBar(content: Text("Invalid location! Please use another location."))
-        );
-      }
-    }
-  }
-
-  void clearUserLocation() {
-    _destinationLatLng = null;
-    mapViewState.polylines.clear();
-    mapViewState.shouldCenter = true;
-    _routeDistance = null;
-    _routePrice = null;
-    mapViewState.markers.remove("start");
-    mapViewState.markers.remove("destination");
-    if (mapViewState.currentPosition != null) {
-      mapViewState.resetCamera();
-    }
-    _routeDistance = null;
-    _routePrice = null;
-    notifyListeners();
-  }
-
-  Future<void> onLatLng(BuildContext context, LatLng latLng) async {
-    try {
-      _destinationLatLng = latLng;
-      notifyListeners();
-      final start = _toApu ? _destinationLatLng! : apuLatLng;
-      final end = _toApu ? apuLatLng : _destinationLatLng!;
-      await _placeService.fetchRoute(start, end).then((polylines) {
-        mapViewState.polylines.add(polylines);
-        mapViewState.shouldCenter = false;
-        mapViewState.setCameraToRoute(
-          topOffsetPercentage: 0.5,
-          bottomOffsetPercentage: 0.5,
-        );
-        mapViewState.markers["start"] = Marker(
-          point: start,
-          builder: (_) => const Icon(Icons.location_pin, size: 35, color: Colors.black),
-        );
-        mapViewState.markers["destination"] = Marker(
-          point: end,
-          builder: (_) => const Icon(Icons.location_pin, size: 35, color: Colors.black),
-        );
-        _routeDistance = calculateRouteDistance(polylines);
-        _routePrice = calculateRoutePrice(_routeDistance!);
-        notifyListeners();
-      });
-    } on Exception catch (e) {
-      ScaffoldMessenger.of(context).showSnackBar(
-        const SnackBar(content: Text("Invalid location! Please use another location."))
-      );
-    }
-  }
-
-  Future<void> cancelJourneyAsPassenger() async {
-    await _journeyRepo.cancelJourneyAsPassenger(_journey!);
-  }
-
-  void createJourney(BuildContext context) {
-    final firebaseUser = context.read<firebase_auth.User?>();
-    if (firebaseUser != null && _routeDistance != null && _routePrice != null) {
-      if (_routeDistance! <= 7.0) {
-        isSearching = true;
-        _journeyRepo.createJourney(
-          Journey(
-            userId: firebaseUser.uid,
-            startLatLng: toApu ? _destinationLatLng! : apuLatLng,
-            endLatLng: toApu ? apuLatLng : _destinationLatLng!,
-            startDescription: _toApu ? _destinationDescription! : apuDescription,
-            endDescription: _toApu ? apuDescription : _destinationDescription!,
-            distance: _routeDistance!.toStringAsFixed(2),
-            price: _routePrice!.toStringAsFixed(2),
-            paymentMode: PaymentMode.cash,
-          ),
-        );
-      } else {
-        ScaffoldMessenger.of(context)
-            .showSnackBar(const SnackBar(content: Text("Journeys are limited to a distance of 7 km")));
-      }
-    }
-  }
-
-  void deleteJourney() {
-    isSearching = false;
-    _journeyRepo.deleteJourney(_journey);
-  }
-
-  Future<void> resetState() async {
-    if (hasDriver) {
-      notificationService.notifyPassenger("Your journey is now complete!", body: "Thank you for using APLanes.");
-      _hasDriver = false;
-    }
-    _driverName = null;
-    _driverLicensePlate = null;
-    _driverPhone = null;
-    _journey = null;
-    _isSearching = false;
-    _isPickedUp = false;
-    _searchController.clear();
-    _routeDistance = null;
-    _routePrice = null;
-    _destinationDescription = null;
-    _destinationLatLng = null;
-    mapViewState.polylines.clear();
-    mapViewState.shouldCenter = true;
-    mapViewState.markers.remove("driver");
-    mapViewState.markers.remove("start");
-    mapViewState.markers.remove("destination");
-    mapViewState.resetCamera();
-    await _driverListener?.cancel();
-    _driverListener = null;
-    notifyListeners();
-  }
-
-  /*
-  * Getters
-  * */
-  get searchController => _searchController;
-
-  String get sessionToken => _sessionToken;
-
-  QueryDocumentSnapshot<User>? get user => _user;
-
-  StreamSubscription<QuerySnapshot<Journey>>? get journeyListener => _journeyListener;
-
-  StreamSubscription<QuerySnapshot<Driver>>? get driverListener => _driverListener;
-
-  QueryDocumentSnapshot<Journey>? get journey => _journey;
-
-  double? get routeDistance => _routeDistance;
-
-  double? get routePrice => _routePrice;
-
-  LatLng? get destinationLatLng => _destinationLatLng;
-
-  String? get destinationDescription => _destinationDescription;
-
-  String? get driverPhone => _driverPhone;
-
-  String? get driverLicensePlate => _driverLicensePlate;
-
-  String? get driverName => _driverName;
-
-  bool get toApu => _toApu;
-
-  bool get hasDriver => _hasDriver;
-
-  bool get isPickedUp => _isPickedUp;
-
-  bool get isSearching => _isSearching;
-
-  String? get vehicleModel => _vehicleModel;
-
-  String? get vehicleManufacturer => _vehicleManufacturer;
-
-  String? get vehicleColor => _vehicleColor;
-
-  /*
-  * Setters
-  * */
-  set sessionToken(String value) {
-    _sessionToken = value;
-    notifyListeners();
-  }
-
-  set user(QueryDocumentSnapshot<User>? value) {
-    _user = value;
-    notifyListeners();
-  }
-
-  set journeyListener(StreamSubscription<QuerySnapshot<Journey>>? value) {
-    _journeyListener = value;
-    notifyListeners();
-  }
-
-  set driverListener(StreamSubscription<QuerySnapshot<Driver>>? value) {
-    _driverListener = value;
-    notifyListeners();
-  }
-
-  set journey(QueryDocumentSnapshot<Journey>? value) {
-    _journey = value;
-    notifyListeners();
-  }
-
-  set driverPhone(String? value) {
-    _driverPhone = value;
-    notifyListeners();
-  }
-
-  set driverLicensePlate(String? value) {
-    _driverLicensePlate = value;
-    notifyListeners();
-  }
-
-  set driverName(String? value) {
-    _driverName = value;
-    notifyListeners();
-  }
-
-  set toApu(bool value) {
-    _toApu = value;
-    notifyListeners();
-  }
-
-  set hasDriver(bool value) {
-    _hasDriver = value;
-    notifyListeners();
-  }
-
-  set isPickedUp(bool value) {
-    _isPickedUp = value;
-    notifyListeners();
-  }
-
-  set isSearching(bool value) {
-    _isSearching = value;
-    notifyListeners();
-  }
-
-  set destinationDescription(String? value) {
-    _destinationDescription = value;
-    notifyListeners();
-  }
-
-  set destinationLatLng(LatLng? value) {
-    _destinationLatLng = value;
-    notifyListeners();
-  }
-
-  set routeDistance(double? value) {
-    _routeDistance = value;
-    notifyListeners();
-  }
-
-  set routePrice(double? value) {
-    _routePrice = value;
-    notifyListeners();
-  }
-}
